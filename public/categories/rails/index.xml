<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Rails on M&#39;enfin ?!? </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://blog.menfin.info/categories/rails/index.xml</link>
    <language>fr-fr</language>
    <author>Bruno Michel</author>
    
    <updated>Mon, 27 Jun 2011 00:00:00 UTC</updated>
    
    <item>
      <title>Rails ou Sinatra ?</title>
      <link>http://blog.menfin.info/posts/2011-06-27-Rails-ou-sinatra/</link>
      <pubDate>Mon, 27 Jun 2011 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2011-06-27-Rails-ou-sinatra/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://rubyonrails.org/&#34;&gt;Ruby on Rails&lt;/a&gt; ou
&lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt;, comment choisir entre les deux ? C&amp;rsquo;est
une question que j&amp;rsquo;entends régulièrement et pour laquelle, je suis toujours un
peu embêté d&amp;rsquo;avoir un pointeur tout prêt vers un article qui expliquerait
cela. Encore aujourd&amp;rsquo;hui, la question &lt;a href=&#34;https://twitter.com/#!/delaBruyne/status/85433554179342336&#34;&gt;m&amp;rsquo;a été
posée&lt;/a&gt; et j&amp;rsquo;ai eu
beau chercher, je n&amp;rsquo;ai rien trouvé de bien concluant.&lt;/p&gt;

&lt;p&gt;On est jamais mieux servi que par soi-même, et c&amp;rsquo;est donc l&amp;rsquo;occasion de
réveiller ce blog qui commençait à prendre la poussière.&lt;/p&gt;

&lt;p&gt;Donc Rails ou Sinatra ? Ça dépend mais la plupart du temps, il est assez
facile de choisir l&amp;rsquo;un ou l&amp;rsquo;autre. Ils ont des philosophies assez différentes
et couvrent ainsi des problématiques différentes.&lt;/p&gt;

&lt;p&gt;Commençons par Ruby on Rails. Il a été développé par &lt;a href=&#34;http://en.wikipedia.org/wiki/David_Heinemeier_Hansson&#34;&gt;David Heinemeier
Hansson&lt;/a&gt; pour
développer des applications web rapidement mais en gardant du code
maintenable. Rails est donc fait pour permettre aux personnes dont le métier
est de construire des applications web (développeurs, intégrateurs, etc.) de
pouvoir faire ça le plus efficacement possible. On retrouve ainsi le
&lt;em&gt;scaffold&lt;/em&gt; qui permet de gagner du temps en début de projet et de nombreuses
conventions pour aller plus vite dans les cas courants. Mais cela a aussi des
inconvénients : Rails est un gros framework et apprendre à s&amp;rsquo;en servir
correctement demande un investissement initial en temps qui est loin d&amp;rsquo;être
négligeable. Si on veut vraiment être efficace, il faut respecter l&amp;rsquo;&lt;em&gt;esprit&lt;/em&gt;
de Ruby on Rails et ses manières de faire, mais aussi connaître les
bibliothèques qui vont bien, les fameuses &lt;em&gt;gems&lt;/em&gt; comme
&lt;a href=&#34;https://github.com/plataformatec/devise&#34;&gt;Devise&lt;/a&gt; ou
&lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;De l&amp;rsquo;autre coté, Sinatra a des ambitions toutes autres : il veut juste
permettre à des développeurs Ruby de faire des applications web simples avec
le minimum d&amp;rsquo;efforts. Cela commence avec une API extrêmement simple qui permet
de démarrer tout de suite sans avoir à apprendre grand chose. Pour cela,
Sinatra se contente du minimum et n&amp;rsquo;essaye pas d&amp;rsquo;offrir plein de choses dès le
départ. C&amp;rsquo;est ainsi un projet avec une taille beaucoup plus réduite mais qui
offre plus de libertés. Là où les projets Rails sont toujours organisés d&amp;rsquo;une
façon semblables pour permettre aux développeurs et intégrateurs de passer
facilement d&amp;rsquo;un projet à l&amp;rsquo;autre, Sinatra est bien plus souple et peut, par
exemple, venir ajouter une interface web à un projet déjà existant. Sa
simplicité est également intéressante pour les débutants qui peuvent ainsi
&lt;a href=&#34;http://www.sinatrarb.com/intro-fr.html&#34;&gt;faire très rapidement des choses&lt;/a&gt;
sans avoir, au préalable, à lire un bouquin complet. Et rien n&amp;rsquo;interdit de
passer à Rails plus tard.&lt;/p&gt;

&lt;p&gt;Pour résumer, Ruby on Rails est un rouleur compresseur qui permet de
construire très rapidement des applications web de qualité pour les personnes
dont c&amp;rsquo;est le métier, alors que Sinatra couvre d&amp;rsquo;autres besoins : il permet de
découvrir Ruby ou le développement web en douceur pour les débutants et offre
une souplesse incroyable pour les hackers confirmés.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>French_Rails compatible avec Rails3.0.0.beta4</title>
      <link>http://blog.menfin.info/posts/2010-06-09-frenchrails-compatible-avec-rails3/</link>
      <pubDate>Wed, 09 Jun 2010 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2010-06-09-frenchrails-compatible-avec-rails3/</guid>
      <description>&lt;p&gt;Une &lt;a href=&#34;http://weblog.rubyonrails.org/2010/6/8/rails-3-0-beta-4-now-rc-in-days&#34;&gt;nouvelle version beta de
Rails3&lt;/a&gt;
vient de sortir. Elle utilise une version plus récente
d&amp;rsquo;&lt;a href=&#34;http://github.com/svenfuchs/i18n&#34;&gt;i18n&lt;/a&gt;, ce qui faisait que mon plugin
&lt;a href=&#34;http://github.com/nono/french-rails&#34;&gt;French Rails&lt;/a&gt; ne fonctionnait plus. J&amp;rsquo;ai
corrigé ça et sorti une nouvelle version :
&lt;a href=&#34;http://rubygems.org/gems/french_rails/versions/0.2.2&#34;&gt;la 0.2.2&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mise à jour de FrenchRails</title>
      <link>http://blog.menfin.info/posts/2009-12-23-mise-a-jour-de-french-rails/</link>
      <pubDate>Wed, 23 Dec 2009 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2009-12-23-mise-a-jour-de-french-rails/</guid>
      <description>&lt;p&gt;J&amp;rsquo;ai un petit plugin pour Rails qui permet de localiser facilement une application Rails : &lt;a href=&#34;http://github.com/nono/french-rails/tree/master&#34;&gt;FrenchRails&lt;/a&gt;.
Pour ceux qui auraient raté &lt;a href=&#34;http://blog.menfin.info/post/2009/03/18/Un-plugin-RoR-nomme-FrenchRails&#34;&gt;l&amp;rsquo;épisode précédent&lt;/a&gt;, en gros, ça permet de prendre en compte le fait que 0 est un singulier en français (alors que c&amp;rsquo;est pluriel en anglais).&lt;/p&gt;

&lt;p&gt;Je viens de mettre à jour ce plugin pour qu&amp;rsquo;il traduise également les &amp;lsquo;new&amp;rsquo; et &amp;lsquo;edit&amp;rsquo; qui se balladent dans les URL générées par Rails.
Maintenant, ce sera &amp;lsquo;nouveau&amp;rsquo; et &amp;lsquo;modifier&amp;rsquo;, ai-je décidé.&lt;/p&gt;

&lt;p&gt;Enfin, tant qu&amp;rsquo;à resortir ce plugin du grenier, j&amp;rsquo;en ai également profité pour faire quelque chose que j&amp;rsquo;aurais dû faire depuis un certain temps : le passer en gem.
Il est disponible sur &lt;a href=&#34;http://rubygems.org/gems/french_rails&#34;&gt;Rubygems&lt;/a&gt; et peut donc s&amp;rsquo;installer d&amp;rsquo;un simple &lt;code&gt;gem install french_rails&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Annotez vos modèles</title>
      <link>http://blog.menfin.info/posts/2009-05-21-annotez-vos-modeles/</link>
      <pubDate>Thu, 21 May 2009 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2009-05-21-annotez-vos-modeles/</guid>
      <description>&lt;p&gt;Quand je travaille sur des modèles dans Rails, j&amp;rsquo;ai souvent besoin de regarder la liste des champs de ce modèle.
Vous savez, ces petites questions toutes bêtes que l&amp;rsquo;on se pose tous : c&amp;rsquo;est &lt;code&gt;firstname&lt;/code&gt; ou &lt;code&gt;first_name&lt;/code&gt; ? &lt;code&gt;phone&lt;/code&gt; ou &lt;code&gt;mobile&lt;/code&gt; ? &lt;code&gt;name&lt;/code&gt; ou &lt;code&gt;title&lt;/code&gt; ? &lt;code&gt;description&lt;/code&gt; ou &lt;code&gt;body&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;Pour répondre à ces questions, il faut aller chercher dans &lt;code&gt;db/schema.rb&lt;/code&gt;, fichier que l&amp;rsquo;on a rarement sous les yeux.
Mais j&amp;rsquo;ai mieux à vous proposer : &lt;a href=&#34;http://github.com/ctran/annotate_models/tree/master&#34;&gt;Annotate&lt;/a&gt;.
C&amp;rsquo;est un gem qui ajoute un commentaire en haut de chacun de vos modèles (et tests unitaires) avec la déclaration du modèle en question.&lt;/p&gt;

&lt;p&gt;Voici un exemple tiré de ma réécriture de &lt;a href=&#34;http://linuxfr.org/&#34;&gt;LinuxFr.org&lt;/a&gt; en Rails :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;# == Schema Information
# Schema version: 20090120005239
#
# Table name: news
#
#  id          :integer(4)      not null, primary key
#  state       :string(255)     default(&amp;quot;draft&amp;quot;), not null
#  title       :string(255)
#  body        :text
#  second_part :text
#  section_id  :integer(4)
#  created_at  :datetime
#  updated_at  :datetime
#
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour l&amp;rsquo;utiliser, c&amp;rsquo;est on ne peut plus simple.
On fait un &lt;code&gt;gem install annotate&lt;/code&gt; pour l&amp;rsquo;installer, puis on lance &lt;code&gt;annotate&lt;/code&gt; quand on veut mettre à jour les commentaires.
Pour ma part, je fais ça après chaque &lt;code&gt;rake db:migrate&lt;/code&gt;, mais libre à chacun de le lancer quand il le souhaite.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Request-log-analyzer</title>
      <link>http://blog.menfin.info/posts/2009-05-17-request-log-analyzer/</link>
      <pubDate>Sun, 17 May 2009 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2009-05-17-request-log-analyzer/</guid>
      <description>&lt;p&gt;Dans la série des outils pour Rails que j&amp;rsquo;apprécie, je vais vous parler de &lt;a href=&#34;http://github.com/wvanbergen/request-log-analyzer/tree/master&#34;&gt;request-log-analyzer&lt;/a&gt;.
Pourquoi lui ? Parce qu&amp;rsquo;il m&amp;rsquo;a rendu bien service cette semaine.&lt;/p&gt;

&lt;p&gt;Request-log-analyser est un outil très simple qui permet d&amp;rsquo;analyser les logs de Rails pour découvrir les requêtes HTTP qui consomment du temps CPU.
En pratique, ça s&amp;rsquo;installe simplement avec gem, puis on le lance pour générer un rapport (j&amp;rsquo;aime bien la version HTML) :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install request-log-analyzer
request-log-analyzer --output HTML --file report.html log/production.log
firefox report.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Le rapport nous fournit un certain nombres d&amp;rsquo;informations que les hits sur chaque page, les codes HTTP renvoyés, les requêtes les plus lourdes.
Pour ma part, je me sers surtout du tableau des 20 requêtes HTTP les plus longues en temps cumulé (&lt;em&gt;Request duration - top 20 by cumulative time&lt;/em&gt;).
Cela me donne une liste d&amp;rsquo;actions à bencher pour lesquelles une optimisation est toujours bonne à prendre.
Je passe également un peu de temps à regarder si ces requêtes apparaissent dans les 20 requêtes les plus lourdes pour la base et les 20 requêtes avec le temps de rendering le plus long (toujours en temps cumulé).
Je peux ainsi avoir une idée de ce qui prend du temps, et de valider ainsi que les résultats du bench collent avec ça.
Si je vois qu&amp;rsquo;une requête HTTP passe beaucoup de temps sur la base de données, mais que les résultats du bench ne montrent pas ça, je vais probablement importer la base de données du serveur de production et l&amp;rsquo;utiliser pour refaire les benchs.&lt;/p&gt;

&lt;p&gt;Un autre tableau intéressant est la liste des requêtes bloquantes (&lt;em&gt;Process blockers (&amp;gt; 1 sec duration)&lt;/em&gt;).
Si je vois des requêtes faire pas mal de hits dans cette liste, je sais qu&amp;rsquo;il va falloir les surveiller de près.&lt;/p&gt;

&lt;p&gt;Voilà, request-log-analyzer n&amp;rsquo;est pas un outil magique. Il ne fait qu&amp;rsquo;une chose, mais il le fait bien. Et c&amp;rsquo;est très utile pour savoir par où commencer à optimiser un site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Railroad</title>
      <link>http://blog.menfin.info/posts/2009-05-03-Railroad/</link>
      <pubDate>Sun, 03 May 2009 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2009-05-03-Railroad/</guid>
      <description>&lt;p&gt;Je commence une série d&amp;rsquo;articles sur des outils qu&amp;rsquo;il m&amp;rsquo;arrive d&amp;rsquo;utiliser quand je fais du développement Rails et qui mériterait, à mon avis, d&amp;rsquo;être plus connu.
Le premier article de la série est &lt;a href=&#34;http://railroad.rubyforge.org/&#34;&gt;Railroad&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Railroad est un script Ruby qui permet de générer des graphes à partir d&amp;rsquo;une application d&amp;rsquo;une Rails, ce qui peut être très pratique pour accompagner une documentation quand on a la flemme de faire ces diagrammes soi-même.
Railroad permet de générer 3 types de graphes : un pour les modèles, un pour les controlleurs et un pour les machines à états d&lt;em&gt;&amp;lsquo;acts_as_state_machine&lt;/em&gt;.
Les diagrammes sont générés au format .dot, ce qui permet d&amp;rsquo;en faire facilement des .png ou des .svg avec la suite &lt;a href=&#34;http://www.graphviz.org/&#34;&gt;graphviz&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;auteur du script original ne maintient plus ce script mais on peut en trouver des forks sur &lt;a href=&#34;http://github.com/&#34;&gt;Github&lt;/a&gt;.
Je conseille &lt;a href=&#34;http://github.com/ddollar/railroad/tree/master&#34;&gt;la branche de David Dollar&lt;/a&gt; :
elle fonctionne avec les dernières versions de Rails et comporte mes patchs (&lt;a href=&#34;http://github.com/ddollar/railroad/commit/70b77a233d298356178a10f253f8d201cf5cad40&#34;&gt;1&lt;/a&gt; &lt;a href=&#34;http://github.com/ddollar/railroad/commit/a8815fc3ba8df8db44d078dbf2046ddf99538120&#34;&gt;2&lt;/a&gt; et &lt;a href=&#34;http://github.com/ddollar/railroad/commit/96fb1c540dfc8e2300969e4778a7c7bff9563c59&#34;&gt;3&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;En pratique, on installe le gem &lt;code&gt;ddollar-railroad&lt;/code&gt;, on ajoute une ligne à son fichier &lt;code&gt;Rakefile&lt;/code&gt; et roulez jeunesse :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem install ddollar-railroad
echo &amp;quot;require &#39;railroad/tasks/diagrams&#39; if RAILS_ENV == &#39;development&#39;&amp;quot; &amp;gt;&amp;gt; Rakefile
rake doc:diagrams
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On obtient 3 diagrammes dans doc/diagrams (à condition que graphviz soit installé).
Voici, par exemple, ceux que j&amp;rsquo;obtiens pour &lt;a href=&#34;http://github.com/nono/linuxfr.org/tree/master&#34;&gt;la version Rails&lt;/a&gt; de &lt;a href=&#34;http://linuxfr.org&#34;&gt;LinuxFr.org&lt;/a&gt; :&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/public/railroad_controllers.png&#34; alt=&#34;Railroad - controllers&#34; /&gt;

&lt;img src=&#34;/public/railroad_models.png&#34; alt=&#34;Railroad - models&#34; /&gt;

&lt;img src=&#34;/public/railroad_states.png&#34; alt=&#34;Railroad - states&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Un plugin RoR nommé FrenchRails</title>
      <link>http://blog.menfin.info/posts/2009-03-17-un-plugin-Rails-nomme-French-Rails/</link>
      <pubDate>Tue, 17 Mar 2009 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2009-03-17-un-plugin-Rails-nomme-French-Rails/</guid>
      <description>&lt;p&gt;Comme vous le savez déjà sûrement, je suis en train de re-écrire &lt;a href=&#34;http://linuxfr.org&#34;&gt;LinuxFr.org&lt;/a&gt; en &lt;a href=&#34;http://rubyonrails.org&#34;&gt;Rails&lt;/a&gt;.
Et quand j&amp;rsquo;ai montré où j&amp;rsquo;en étais, on m&amp;rsquo;a remonté un bug étrange : j&amp;rsquo;affiche &amp;ldquo;0 commentaires&amp;rdquo; avec un s à la fin, ce qui est grammaticalement incorrect.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;interruption culturelle&amp;gt;&lt;/code&gt;
Pour ceux qui ne sont pas très calés en internationalisation, sachez que les règles qui définissent singulier et pluriel ne sont pas les mêmes selon les langues (en fait, certaines langues ont mêmes plusieurs sortes de pluriels).
En particulier, il y a une différence importante entre le français et l&amp;rsquo;anglais : en français, 0 est singulier, alors qu&amp;rsquo;il est pluriel en anglais.
Ruby on Rails utilisant par défaut l&amp;rsquo;anglais, on comprend mieux d&amp;rsquo;où vient le &amp;rsquo;s&amp;rsquo; à la fin de &amp;ldquo;0 commentaires&amp;rdquo;.
&lt;code&gt;&amp;lt;/interruption culturelle&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;J&amp;rsquo;utilise l&amp;rsquo;helper &lt;code&gt;pluralize&lt;/code&gt;, et comme Rails a intégré une gestion de l&amp;rsquo;internationalisation à la version 2.2, je pensais qu&amp;rsquo;il suffirait de déclarer la locale pour que cela marche.
Hé bien, non.
Première surprise : l&amp;rsquo;helper &lt;code&gt;pluralize&lt;/code&gt; ne passe pas par la partie I18n, mais utilise une règle en dure pour savoir si un nombre est singulier ou pluriel.
Bon, ce n&amp;rsquo;est pas grave, ce n&amp;rsquo;est pas ça qui va m&amp;rsquo;arrêter : un petit monkey-patching et c&amp;rsquo;est réglé.&lt;/p&gt;

&lt;p&gt;Sauf que, deuxième surprise, cela ne marche toujours pas !
Le backend d&amp;rsquo;I18n fourni avec Rails (I18n::Backend::Simple) ne connaît que la règle pour l&amp;rsquo;anglais, et ne tient donc pas compte de la locale.
Après quelques errements et expérimentations, j&amp;rsquo;ai réussi à trouver un moyen relativement simple de corriger cela (créer un backend qui hérite de I18n::Backend::Simple, avec juste la méthode pluralize redéfinie).
Et là, joie, ça marche :-)&lt;/p&gt;

&lt;p&gt;Comme tout cela m&amp;rsquo;a pris quelques heures, j&amp;rsquo;en ai fait un plugin : &lt;a href=&#34;http://github.com/nono/french-rails/tree/master&#34;&gt;FrenchRails&lt;/a&gt;.
J&amp;rsquo;espère que cela pourra servir à d&amp;rsquo;autres personnes.
En tout cas, moi, je compte l&amp;rsquo;utiliser sur plusieurs projets.&lt;/p&gt;

&lt;p&gt;Dernière chose : si vous avez des besoins plus compliqués que les miens (au hasard, gérer plusieurs langues), ne cherchez pas à utiliser ce plugin, parter plutôt sur une solution plus costaud comme &lt;a href=&#34;http://github.com/joshmh/globalize2/tree/master&#34;&gt;Globalize2&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Rails et la sécurité</title>
      <link>http://blog.menfin.info/posts/2008-07-18-programmez-rails-et-la-securite/</link>
      <pubDate>Fri, 18 Jul 2008 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2008-07-18-programmez-rails-et-la-securite/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;La sécurité des applications web est souvent un sujet délicat : peu de temps à y consacrer, mais cela peut avoir des conséquences assez graves.
Pas de panique !
&lt;a href=&#34;http://rubyonrails.com&#34;&gt;Ruby on Rails&lt;/a&gt; est bien armé et avec un peu de rigueur, on peut se protéger sans trop de difficultés.
Nous allons voir les principaux types d&amp;rsquo;attaques et comment les éviter.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Injections SQL&lt;/h2&gt;

&lt;p&gt;Commençons par un grand classique : &lt;a href=&#34;http://fr.wikipedia.org/wiki/Injection_SQL&#34;&gt;les injections SQL&lt;/a&gt;.
Une injection SQL consiste simplement à envoyer des données non prévues dans une requête SQL.
Prenons comme exemple une application web où les utilisateurs sont authentifiés de la manière suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;@current_user = User.find(:first, :conditions =&amp;gt; &amp;quot;login=&#39;#{params[:login)}&#39; AND password=&#39;#{params[:password)}&#39;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;En temps normal, quand Joe s&amp;rsquo;authentifie, la requête SQL suivante est exécutée :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SELECT * FROM users WHERE login=&#39;Joe&#39; AND password=&#39;0521bc575b0ff61daa62494c7ae9c5b6&#39; LIMIT 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mais supposons maintenant que Kevin, un Script Kiddie, passe dans le coin et décide de mettre &lt;code&gt;&amp;quot;Joe&#39;; --&amp;quot;&lt;/code&gt; dans le champ login.
La requête SQL va alors ressembler à :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;SELECT * FROM users WHERE login=&#39;Joe&#39;; --&#39; AND password=&#39;00000000000000000000000000000000&#39; LIMIT 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kevin a réussi à se faire passer pour Joe sans connaître son mot de passe !&lt;/p&gt;

&lt;p&gt;Heureusement, Active Record permet de &lt;a href=&#34;http://manuals.rubyonrails.com/read/chapter/43&#34;&gt;nous en protéger assez facilement&lt;/a&gt;.
Pour cela, il suffit d&amp;rsquo;utiliser les formes échappées comme cela :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;@current_user = User.find(:first, :conditions =&amp;gt; [&amp;quot;login=? AND password=?&amp;quot;, params[:login), params[:password)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ou de façon équivalente :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;@current_user = User.find(:first, :conditions =&amp;gt; {:login =&amp;gt; params[:login), :password =&amp;gt; params[:password)})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans les 2 cas, Active Record rajoutera un caractère &lt;code&gt;&#39;\&#39;&lt;/code&gt; devant chaque apostrophe de façon à éviter les injections SQL.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;L&amp;rsquo;authentification et la gestion des droits&lt;/h2&gt;

&lt;p&gt;Pour la grande majorité des projets, l&amp;rsquo;authentification (et la gestion des droits qui vont avec) est un passage obligé.
Pour cela, il existe un certain nombre de points importants à respecter comme le chiffrement des mots de passe stockés en base de données
(ce que nous n&amp;rsquo;avons pas fait dans l&amp;rsquo;exemple précédent).
Les erreurs sont vite arrivées, aussi je vous recommande d&amp;rsquo;utiliser des plugins reconnus comme &lt;a href=&#34;http://agilewebdevelopment.com/plugins/restful_authentication&#34;&gt;Restful Authentication&lt;/a&gt;, &lt;a href=&#34;http://agilewebdevelopment.com/plugins/openidauthentication&#34;&gt;OpenID Authentication&lt;/a&gt; et &lt;a href=&#34;http://www.writertopia.com/developers/authorization&#34;&gt;Authorization&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il ne vous reste plus qu&amp;rsquo;à faire attention à un dernier détail : mettre en cache des pages nécessitant une authentification est une mauvaise idée.
En effet, ces pages vont alors être servies par le serveur web sans passer Rails, et donc sans vérification de l&amp;rsquo;authentification.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Se protéger des données forgées&lt;/h2&gt;

&lt;p&gt;L&amp;rsquo;étape suivante consiste à bien sécuriser l&amp;rsquo;accès aux données, aussi bien en lecture qu&amp;rsquo;en écriture.
En effet, Rails possède quelques raccourcis très pratiques, mais qui peuvent poser problème quand ils sont mal maîtrisés.
Le plus courant est &lt;a href=&#34;http://manuals.rubyonrails.com/read/chapter/47&#34;&gt;l&amp;rsquo;affectation de masse&lt;/a&gt;, technique qui consiste à créer un objet Active Record directement depuis les paramètres de la requête HTTP.
Par exemple, la création d&amp;rsquo;un compte utilisateur pourra s&amp;rsquo;effectuer de la façon suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;@user = User.create(params[:user))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Supposons maintenant que la table &lt;code&gt;&#39;users&#39;&lt;/code&gt; comporte un champ &lt;code&gt;&#39;admin&#39;&lt;/code&gt; qui vaut &lt;code&gt;0&lt;/code&gt; par défaut ou &lt;code&gt;1&lt;/code&gt; pour les super-utilisateurs.
Un utilisateur malveillant pourrait forger la requête HTTP pour ajouter un paramètre &lt;code&gt;user[admin)=1&lt;/code&gt; afin de gagner les pouvoirs réservés aux admins.
La première solution pour se protéger de cette attaque consiste à écrire explicitement quels sont les paramètres autorisés :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;@user = User.create(
	:login =&amp;gt; params[:user)[:login),
	:email =&amp;gt; params[:user)[:email),
	:password =&amp;gt; params[:user)[:password),
	:cgu =&amp;gt; params[:user)[:cgu))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mais ceci peut vite devenir pénible quand on commence à avoir des formulaires un peu conséquents.
C&amp;rsquo;est pourquoi on lui préfère généralement la deuxième solution : la déclaration dans le modèle de la liste des attributs qui ne peuvent pas être modifiés.
Cette déclaration se fait à l&amp;rsquo;aide de la méthode &lt;strong&gt;&lt;code&gt;attr_protected&lt;/code&gt;&lt;/strong&gt; comme suit :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;class User &amp;lt; ActiveRecord::Base
	attr_protected :admin
	...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nous pouvons de nouveau utiliser l&amp;rsquo;affectation de masse sans craindre qu&amp;rsquo;un utilisateur se fasse passer pour un admin, Rails s&amp;rsquo;occupe de filtrer les paramètres.&lt;/p&gt;

&lt;p&gt;Dans le même style, un attaquant peut essayer de &lt;a href=&#34;http://www.therailsway.com/2007/3/26/association-proxies-are-your-friend&#34;&gt;forger des URL&lt;/a&gt;.
Si, par exemple, l&amp;rsquo;utilisateur authentifié peut supprimer l&amp;rsquo;item n°123 qui lui appartient, en appelant l&amp;rsquo;URL &lt;code&gt;/items/delete/123&lt;/code&gt;, alors que se passera-t-il s&amp;rsquo;il appelle la même URL pour l&amp;rsquo;item n°456 qui ne lui appartient pas ?
La réponse dépend du code de la méthode &lt;code&gt;delete&lt;/code&gt;.
Une implémentation de base pourrait ressembler à :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;class ItemsController &amp;lt; ApplicationController
	def delete
		Item.delete(params[:id))
	end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour se protéger des URL forgées, on pourrait la transformer en :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;class ItemsController &amp;lt; ApplicationController
	def delete
		@item = @current_user.items.find(params[:id))
		@item.delete if @item
	end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ce n&amp;rsquo;est pas parfait (on pourrait vérifier que c&amp;rsquo;est bien une requête de type POST), mais c&amp;rsquo;est déjà beaucoup mieux.&lt;/p&gt;

&lt;p&gt;Un dernier petit truc pour la route avant de passer à autre chose.
Si vous avez une API pour laquelle vous utilisez la sérialisation XML, il peut être intéressant de surcharger &lt;code&gt;ActiveRecord#to_xml&lt;/code&gt; pour que le champ &lt;code&gt;secret_field&lt;/code&gt; n&amp;rsquo;y apparaisse pas :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;class Item &amp;lt; ActiveRecord::Base
	def to_xml(args={})
		super({:except =&amp;gt; [:secret_field)}.merge(args))
	end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Cross-Site Scripting&lt;/h2&gt;

&lt;p&gt;Jusque maintenant, nous avons vu des attaques directes : un utilisateur essaye de s&amp;rsquo;en prendre à notre site.
Il existe également des attaques plus pernicieuses que l&amp;rsquo;on classe sous le nom de &lt;a href=&#34;http://fr.wikipedia.org/wiki/Cross_site_scripting&#34;&gt;Cross-Site Scripting&lt;/a&gt; (XSS en abrégé).
Leur but est de s&amp;rsquo;en prendre aux utilisateurs de notre site en glissant des cochonneries sur notre site.
Ceci peut aller du spammeur qui mettra une balise &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; vers son site dans tous les formulaires qui lui passent sous la main à l&amp;rsquo;injection de javascript non maîtrisé.&lt;/p&gt;

&lt;p&gt;Par exemple, quelqu&amp;rsquo;un crée un item dont la description est la suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;&amp;lt;script&amp;gt;document.location=&#39;http://www.programmez.com/&#39;;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Si maintenant un visiteur affiche la description de cet item, il sera redirigé vers le site www.programmez.com.
Vous vous dites que c&amp;rsquo;est ennuyeux mais pas bien méchant ?
Oui, mais la même technique permet de voler les cookies et donc les sessions associées.
Nous allons donc chercher à nous protéger de ces failles XSS.&lt;/p&gt;

&lt;p&gt;Pour cela, il est important de faire une distinction entre 2 cas : est-ce que le champ que vous allez afficher peut contenir des balises HTML ou non ?
Pour afficher le nom d&amp;rsquo;un item, on sera dans le premier cas, à savoir pas de balises HTML : on veut juste afficher le nom tel que l&amp;rsquo;a rentré son propriétaire.
Par contre, on peut souhaiter être plus souple pour la description de l&amp;rsquo;item et laisser la possibilité d&amp;rsquo;avoir un titre (balise &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;), du gras (&lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;) ou de l&amp;rsquo;italique (&lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;).
Ces 2 cas ne se traitent pas de la même façon.
Pour le premier cas, Rails nous offre un moyen simple de nous en protéger : le helper &lt;strong&gt;&lt;code&gt;h&lt;/code&gt;&lt;/strong&gt;.
En pratique, à chaque fois que l&amp;rsquo;on souhaitera afficher le titre d&amp;rsquo;un item, on procédera de la manière suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%=h @item.title %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ce &lt;code&gt;h&lt;/code&gt; va convertir les caractères qui pourraient être interprétés par un navigateur web en l&amp;rsquo;entité HTML correspondante. Problème résolu.&lt;/p&gt;

&lt;p&gt;Le deuxième cas est par contre plus difficile à traiter.
Vous pouvez être tenté d&amp;rsquo;utiliser un moteur de formatage de texte comme &lt;a href=&#34;http://whytheluckystiff.net/ruby/redcloth/&#34;&gt;RedCloth&lt;/a&gt;.
Attention, cela ne suffit pas à filtrer &lt;a href=&#34;http://www.rorsecurity.info/2007/08/20/redcloth-security-thoughts/&#34;&gt;toutes les attaques&lt;/a&gt; !
Pour votre tranquillité, il vaut mieux utiliser le plugin &lt;a href=&#34;http://svn.techno-weenie.net/projects/plugins/white_list/&#34;&gt;WhiteList&lt;/a&gt;.
Depuis Rails 2.0, ce plugin fait partie du framework et peut s&amp;rsquo;utiliser de la façon suivante :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;%= sanitize @item.description, :tags =&amp;gt; %w(b i h1) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Il est possible de déclarer les balises autorisées de manière globale : je vous renvoie à la &lt;a href=&#34;http://api.rubyonrails.org/classes/ActionView/Helpers/SanitizeHelper.html#M000936&#34;&gt;documentation officielle&lt;/a&gt;.
Et pour ceux qui veulent être sûrs de ne pas oublier d&amp;rsquo;appel à &lt;code&gt;h&lt;/code&gt; ou à &lt;code&gt;sanitize&lt;/code&gt;, il existe des moteurs de template alternatifs comme &lt;a href=&#34;http://wiki.rubyonrails.com/rails/pages/Safe+ERB&#34;&gt;Safe ERB&lt;/a&gt; ou &lt;a href=&#34;http://www.kuwata-lab.com/erubis/&#34;&gt;Erubis&lt;/a&gt;.
Ces moteurs adoptent l&amp;rsquo;approche opposée :
ils filtrent par défaut tous les éléments &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt;, charge au développeur d&amp;rsquo;indiquer explicitement ceux pour lequel le moteur ne fera pas de filtrage.&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;Cross-Site Request Forgeries&lt;/h2&gt;

&lt;p&gt;Juste avant de finir, je voudrais juste dire un mot sur un dernier type d&amp;rsquo;attaques.
Les CSRF, abréviation de Cross-Site Request Forgery, sont des attaques complexes qui visent à forcer l&amp;rsquo;utilisateur à envoyer une requête HTTP vers notre site lorsque celui-ci visitera le site de l&amp;rsquo;attaquant.
Je vous renvoie à &lt;a href=&#34;http://fr.wikipedia.org/wiki/Cross-Site_Request_Forgeries&#34;&gt;wikipedia&lt;/a&gt; si vous voulez comprendre comment fonctionne ce type d&amp;rsquo;attaques.
Sachez que Rails vous protège de celles-ci depuis la version 2.0 et qu&amp;rsquo;il existe un plugin pour les versions plus anciennes : &lt;a href=&#34;http://svn.techno-weenie.net/projects/plugins/csrf_killer/&#34;&gt;CSRF-killer&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Nous avons pu voir qu&amp;rsquo;en prenant quelques bonnes habitudes, on pouvait développer des applications sûres en Rails.
Il reste cependant des sujets que je n&amp;rsquo;ai pas abordés comme &lt;a href=&#34;http://www.igvita.com/blog/2006/10/10/securing-your-rails-environment/&#34;&gt;l&amp;rsquo;administration de Rails&lt;/a&gt;, &lt;a href=&#34;http://www.rorsecurity.info/2007/03/15/apache-2-file-privileges-and-modules/&#34;&gt;apache&lt;/a&gt; ou &lt;a href=&#34;http://www.rorsecurity.info/2007/02/25/securing-mysql/&#34;&gt;MySQL&lt;/a&gt; (&lt;a href=&#34;http://www.rorsecurity.info/2007/02/27/rails%e2%80%99-friends-securing-mysql-continued/&#34;&gt;suite&lt;/a&gt;), &lt;a href=&#34;http://www.rorsecurity.info/2007/03/27/working-with-files-in-rails/&#34;&gt;la manipulation des fichiers&lt;/a&gt; ou encore &lt;a href=&#34;http://railscasts.com/episodes/9&#34;&gt;le filtrage des informations sensibles dans les logs&lt;/a&gt;.
Il est également important de se tenir au courant des mises à jour de sécurité de Rails et des plugins que vous utilisez.&lt;/p&gt;

&lt;p&gt;Je remercie Benoît Sibaud pour sa relecture attentive.&lt;/p&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Références&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.rorsecurity.info/ruby-on-rails-security-cheatsheet/&#34;&gt;http://www.rorsecurity.info/ruby-on-rails-security-cheatsheet/&lt;/a&gt;
&lt;a href=&#34;http://www.quarkruby.com/2007/9/20/ruby-on-rails-security-guide&#34;&gt;http://www.quarkruby.com/2007/9/20/ruby-on-rails-security-guide&lt;/a&gt;
&lt;a href=&#34;http://blog.innerewut.de/2008/1/3/24c3-ruby-on-rails-security&#34;&gt;http://blog.innerewut.de/2008/1/3/24c3-ruby-on-rails-security&lt;/a&gt;
&lt;a href=&#34;http://www.owasp.org/index.php/OWASP_AppSec_FAQ&#34;&gt;http://www.owasp.org/index.php/OWASP_AppSec_FAQ&lt;/a&gt;
&lt;a href=&#34;http://www.owasp.org/index.php/Top_10_2007&#34;&gt;http://www.owasp.org/index.php/Top_10_2007&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Annonces RailsConf 2008</title>
      <link>http://blog.menfin.info/posts/2008-05-08-annonces-railsconf/</link>
      <pubDate>Thu, 08 May 2008 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2008-05-08-annonces-railsconf/</guid>
      <description>&lt;p&gt;La &lt;a href=&#34;http://en.oreilly.com/rails2008/&#34;&gt;RailsConf 2008&lt;/a&gt;, la grande messe annuelle des railers, aura lieu du 29 mai au 6 juin.
A cette occasion, un certain nombre d&amp;rsquo;annonces devrait être faites.
Bien entendu, la plus attendue sera celle de &lt;a href=&#34;|http://rubyonrails.com&#34;&gt;Ruby on Rails&lt;/a&gt; 2.1.
Mais c&amp;rsquo;est loin d&amp;rsquo;être la seule.
Coté framework, on devrait également entendre parler de &lt;a href=&#34;http://www.merbivore.com/&#34;&gt;Merb&lt;/a&gt; dont la version 1.0 devrait être annoncée par ce RailsConf si tout va bien.&lt;/p&gt;

&lt;p&gt;On attend également beaucoup de choses pour les interpréteurs Ruby :
arrivée du tout nouveau &lt;a href=&#34;http://ruby.gemstone.com/&#34;&gt;MagLev&lt;/a&gt;, &lt;a href=&#34;http://rubini.us/&#34;&gt;Rubinius&lt;/a&gt; faisant tourner des applis Rails, &lt;a href=&#34;http://jruby.codehaus.org/&#34;&gt;JRuby&lt;/a&gt; plus rapide que l&amp;rsquo;interpréteur Ruby officiel pour les applis Rails ?
Pour le moment, ce ne sont que des objectifs (ou au mieux des rumeurs), mais on sent une certaine agitation de ce coté-là.&lt;/p&gt;

&lt;p&gt;Enfin, la mode est au moteur de réseaux sociaux, et le RailsConf sera l&amp;rsquo;endroit pour en parler, mais ceci fera l&amp;rsquo;objet d&amp;rsquo;un autre post sur ce blog ;-)
Bref, plein de bonnes choses en vue qui me feront regretter de ne pas pouvoir y aller&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>