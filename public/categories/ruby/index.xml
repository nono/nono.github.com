<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Ruby on M&#39;enfin ?!? </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>http://blog.menfin.info/categories/ruby/index.xml</link>
    <language>fr-fr</language>
    <author>Bruno Michel</author>
    
    <updated>Tue, 14 Oct 2014 00:00:00 UTC</updated>
    
    <item>
      <title>When one sidekiq instance is not enough</title>
      <link>http://blog.menfin.info/posts/2014-10-15-when-one-sidekiq-instance-is-not-enough/</link>
      <pubDate>Tue, 14 Oct 2014 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2014-10-15-when-one-sidekiq-instance-is-not-enough/</guid>
      <description>&lt;p&gt;In the Ruby world, there was a popular gem for queueing jobs: resque. With one
call to a ruby method, you can put a job in redis. And a daemon, called a
worker, can take a job from redis, process it, and then go to the next job.&lt;/p&gt;

&lt;p&gt;It works well, but when you want to scale and process more than one job in
parallel, you have to launch several worker processes, and it can take a lot
of memory. So, Mike Perham wrote a new gem: Sidekiq. It does the same thing
than resque, but it enables to perform multiple jobs inside a process by using
threads. And threads take a lot less memory than processes.&lt;/p&gt;

&lt;p&gt;Sidekiq became more popular than resque, and it is well summed up by its
headline:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What if 1 Sidekiq process could do the work of 20 Resque processes?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But, is it true? Well, it depends. For most tasks, like sending mails or
fetching things from internet, it works really nice.&lt;/p&gt;

&lt;p&gt;In some cases, like CPU-intensive tasks, it&amp;rsquo;s more complicated. The official
Ruby interpreter (MRI) has something called the Global Interpreter Lock (GIL).
Its role is to avoid that code from one thread can mess another thread. For
that, when a thread wants to execute Ruby code, it has to first take the GIL.
And after some time, it will release the GIL, so that another thread can take
it and execute other Ruby code: it&amp;rsquo;s cooperative scheduling. There are a few
exceptions to this rule: waiting the response from a database or an HTTP
connection can be made by a threading that doesn&amp;rsquo;t have the GIL.&lt;/p&gt;

&lt;p&gt;So, what to do when you are in one those cases?&lt;/p&gt;

&lt;p&gt;First, you can try another interpreter: JRuby, for example, has no GIL and can
run several threads over all your cores. JRuby is also said to be a bit faster
than MRI, but it varies a lot from one use case to another. YMMV.&lt;/p&gt;

&lt;p&gt;Last week, I had a sidekiq instance running with MRI that take 100% of CPU, ie
it used only one core from the 8 there. So, i tried JRuby (and it wasn&amp;rsquo;t
painless because of some incompatible gems). Yeah, my sidekiq instance running
with JRuby can use all the 8 cores. But it was still processing jobs 30%
slower than MRI&amp;hellip; So, I&amp;rsquo;m keeping MRI and I will use the same strategy that
resque: running several processes. With multiple sidekiq instance, it&amp;rsquo;s
possible to use more than one core, even on MRI.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Présentation rapide de Ruby 1.9 aux RMLL</title>
      <link>http://blog.menfin.info/posts/2010-07-11-presentation-rapide-de-ruby-19-aux-RMLL/</link>
      <pubDate>Sun, 11 Jul 2010 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2010-07-11-presentation-rapide-de-ruby-19-aux-RMLL/</guid>
      <description>&lt;p&gt;Cette semaine, s&amp;rsquo;est tenue la 11ème édition des
&lt;a href=&#34;http://2010.rmll.info/&#34;&gt;Rencontres Mondiales du Logiciel Libre&lt;/a&gt;
à Bordeaux. J&amp;rsquo;en ai profité pour faire une
&lt;a href=&#34;http://2010.rmll.info/Presentation-rapide-de-Ruby-1-9.html&#34;&gt;présentation rapide de Ruby 1.9&lt;/a&gt;.
Les slides sont en ligne sur &lt;a href=&#34;http://rmll2010-ruby19.heroku.com/&#34;&gt;http://rmll2010-ruby19.heroku.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Un ami, &lt;a href=&#34;http://wtf.cyprio.net/&#34;&gt;oz&lt;/a&gt;, m&amp;rsquo;a prêté le livre &lt;strong&gt;Confessions of a
public speaker&lt;/strong&gt; de &lt;a href=&#34;http://www.scottberkun.com/&#34;&gt;Scott Berkun&lt;/a&gt;. C&amp;rsquo;est u
livre très intéressant qui vous donne des conseils pratiques sur comment
donner de meilleurs présentations. Je n&amp;rsquo;ai malheureusement pas eu le temps de
le lire entièrement avant ma présentation aux RMLL, et encore moins
d&amp;rsquo;appliquer les conseils, mais j&amp;rsquo;ai vraiment le sentiment que les conseils
sont pertinents et m&amp;rsquo;auraient permis de faire une bien meilleure présentation.
En tout cas, je suis bien décidé à essayer d&amp;rsquo;en appliquer quelques uns à la
prochaine présentation que je ferais, puis de plus en plus si cela marche
comme prévu.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RubyflowFr, premiers retours</title>
      <link>http://blog.menfin.info/posts/2008-09-10-rubyflowfr-premiers-retours/</link>
      <pubDate>Wed, 10 Sep 2008 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2008-09-10-rubyflowfr-premiers-retours/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://flow.rubyfrance.org&#34;&gt;RubyflowFr&lt;/a&gt; est en ligne depuis une dizaine de jours.
C&amp;rsquo;est l&amp;rsquo;occasion de faire un premier retour dessus :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;18 posts&lt;/li&gt;
&lt;li&gt;8 utilisateurs enregistrés&lt;/li&gt;
&lt;li&gt;environ 1500 pages vues&lt;/li&gt;
&lt;li&gt;une trentaine de personnes suivent quotidiennement les flux RSS, d&amp;rsquo;après Feedburner&lt;/li&gt;
&lt;li&gt;déjà des changements de CSS !&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Merci à Nicolas Gruson pour ces modifications de CSS qui améliorent grandement la lisibilité du site.
Bref, cela démarre pas mal, même si j&amp;rsquo;aimerais bien que plus de personnes &lt;a href=&#34;http://flow.rubyfrance.org/items/new&#34;&gt;proposent des liens&lt;/a&gt; (il n&amp;rsquo;y a pas besoin de compte pour cela).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>RubyflowFr est en ligne</title>
      <link>http://blog.menfin.info/posts/2008-09-02-rubyflowfr-est-en-ligne/</link>
      <pubDate>Tue, 02 Sep 2008 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2008-09-02-rubyflowfr-est-en-ligne/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.rubyflow.com/&#34;&gt;Rubyflow&lt;/a&gt; est une application de publications de liens à destination de la communauté Ruby.
Peter Cooper a libéré le code source de cette application, aussi &lt;a href=&#34;http://rubyfrance.org/&#34;&gt;Ruby France&lt;/a&gt; a décidé d&amp;rsquo;en sortir une version française destinée à la communauté française des rubyistes et railers.&lt;/p&gt;

&lt;p&gt;L&amp;rsquo;adresse du site est &lt;a href=&#34;http://flow.rubyfrance.org/&#34;&gt;http://flow.rubyfrance.org/&lt;/a&gt; .
Bien entendu, vous êtes encouragés à partager vos liens sur Ruby, Rails, Merb ou autres en les postant accompagnés d&amp;rsquo;une courte description.
Vous savez ce qu&amp;rsquo;il vous reste à faire ;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dossier Ruby on Rails dans programmez</title>
      <link>http://blog.menfin.info/posts/2008-04-02-mon-article-dans-programmez/</link>
      <pubDate>Wed, 02 Apr 2008 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2008-04-02-mon-article-dans-programmez/</guid>
      <description>&lt;p&gt;La revue &lt;a href=&#34;http://www.programmez.com&#34;&gt;Programmez&lt;/a&gt; sort un dossier sur &lt;a href=&#34;http://www.rubyonrails.com&#34;&gt;Ruby on Rails&lt;/a&gt;.
La &lt;a href=&#34;http://programmez.com/magazine_articles.php?id_article=1031&amp;amp;&amp;amp;titre=RUBY on Railq&#34;&gt;première partie de ce dossier&lt;/a&gt;
est sortie ce mois-ci, et la suite sera pour le mois prochain.
Si je vous parle de cela, c&amp;rsquo;est parce que j&amp;rsquo;ai l&amp;rsquo;honneur de participer à ce dossier : j&amp;rsquo;ai écrit le dossier sur Rails et la sécurité.
Vous n&amp;rsquo;aurez plus d&amp;rsquo;excuses pour ne pas suivre les règles de bases pour s&amp;rsquo;assurer de la sécurité de son appli rails.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IRB, un outil à (re)découvrir</title>
      <link>http://blog.menfin.info/posts/2007-11-30-irbrc/</link>
      <pubDate>Fri, 30 Nov 2007 00:00:00 UTC</pubDate>
      <author>Bruno Michel</author>
      <guid>http://blog.menfin.info/posts/2007-11-30-irbrc/</guid>
      <description>&lt;p&gt;IRB est un outil génial pour tester rapidement un truc en &lt;a href=&#34;http://www.ruby-lang.org/fr/&#34;&gt;Ruby&lt;/a&gt;.
C&amp;rsquo;est une sorte d&amp;rsquo;interpréteur Ruby qui fonctionne comme un shell :
vous tapez une ligne de Ruby, irb l&amp;rsquo;interprête et vous donne le résultat, vous tapez une autre ligne, irb l&amp;rsquo;interprête en tenant compte de la première ligne, et ainsi de suite.
Voici par exemple ce que cela donne (avec en gras, ce que j&amp;rsquo;ai tapé) :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;&amp;gt; titi = 2 + 3
5
&amp;gt; toto = titi * 4
20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pour ceux qui veulent en savoir plus, je recommande de lire
&lt;a href=&#34;http://poignantguide.net/ruby/expansion-pak-1.html&#34;&gt;le chapitre consacré à IRB&lt;/a&gt; dans
&lt;a href=&#34;http://fr.poignantguide.net/&#34;&gt;Le Guide (Poignant) de Why&amp;rsquo;s vers Ruby&lt;/a&gt; et d&amp;rsquo;essayer ca dans
&lt;a href=&#34;http://tryruby.hobix.com/&#34;&gt;Try Ruby&lt;/a&gt; qui est, en gros, un IRB dans votre navigateur web.&lt;/p&gt;

&lt;p&gt;Il est possible de configurer IRB via le fichier &lt;code&gt;$HOME/.irbrc&lt;/code&gt; : changer le prompt, charger des fichiers, activer l&amp;rsquo;auto-complétion, etc.
&lt;a href=&#34;http://quotedprintable.com/2007/9/13/my-irbrc&#34;&gt;Comme&lt;/a&gt;
&lt;a href=&#34;http://drnicwilliams.com/2006/10/12/my-irbrc-for-consoleirb/&#34;&gt;d&amp;rsquo;autres&lt;/a&gt;
&lt;a href=&#34;http://redhanded.hobix.com/inspect/stickItInYourIrbrcMethodfinder.html&#34;&gt;personnes&lt;/a&gt;
&lt;a href=&#34;http://blog.nicksieger.com/articles/2006/05/30/irbrc-on-windows&#34;&gt;l&amp;rsquo;ont&lt;/a&gt;
&lt;a href=&#34;http://ruby.tie-rack.org/3/my-irbrc/&#34;&gt;fait&lt;/a&gt;
&lt;a href=&#34;http://errtheblog.com/post/26&#34;&gt;avant&lt;/a&gt;
&lt;a href=&#34;http://romeda.org/blog/2006/11/irbrc.html&#34;&gt;moi&lt;/a&gt;,
je poste mon fichier de conf &lt;code&gt;.irbrc&lt;/code&gt; pour que chacun puisse s&amp;rsquo;en inspirer (et aussi pour le retrouver plus facilement quand je ne suis pas chez moi ;-)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;ruby&#34;&gt;require &amp;quot;yaml&amp;quot;
require &amp;quot;irb/completion&amp;quot;

IRB.conf[:USE_REALINE] = true
IRB.conf[:PROMPT_MODE] = :SIMPLE

# History with readline
HISTFILE = &amp;quot;~/.irb.hist&amp;quot;
MAXHISTSIZE = 100

# what? (gem install what_methods)
require &amp;quot;what_methods&amp;quot;

# Wirble (gem install wirble)
require &amp;quot;wirble&amp;quot;
Wirble.init
Wirble.colorize

# Just for Rails...
if ENV[&amp;quot;RAILS_ENV&amp;quot;]
  IRB.conf[:IRB_RC] = Proc.new do
    ActiveRecord::Base.logger = Logger.new(STDOUT)
    ActiveRecord::Base.instance_eval { alias :[] :find }
  end
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>